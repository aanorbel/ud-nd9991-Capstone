Description: >
  Norbel Ambanumben - IAM Jenkins Pipelines

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  GroupName:
    Description: Name of group
    Type: String
    Default: jenkins-group
  
  UserName:
    Description: Name of user
    Type: String
    Default: jenkins

Resources:

  JenkinsUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref UserName
      LoginProfile:
        Password: "UserJenkins"
        PasswordResetRequired: true
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  JenkinsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Ref GroupName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess

  JenkinsUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-Jenkins-Role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-EKS-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess

  EKSNodegroupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-EKS-Nodes-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  JenkinsPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-Jenkins-Policies
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - "ec2:DescribeAddresses"
          - "ec2:AllocateAddress"
          - "ec2:DescribeInstances"
          - "ec2:AssociateAddress"
          Resource: '*'
        - Effect: Allow
          Action:
          - "iam:ChangePassword"
          Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
      Groups:
        - !Ref JenkinsGroup
      Roles:
        - !Ref JenkinsUserRole
      Users:
        - !Ref JenkinsUser

  AddUserGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref JenkinsGroup
      Users:
        - !Ref JenkinsUser

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - !Ref JenkinsUserRole

  Keys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref JenkinsUser

Outputs:

  JenkinsRol:
    Description: Jenikins Role
    Value: !GetAtt JenkinsUserRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-JenkinsRole

  ClusterRol:
    Description: Cluster Role
    Value: !GetAtt ClusterRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-ClusterRole

  NodesRol:
    Description: EKS Nodes Role
    Value: !GetAtt EKSNodegroupRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-EKSNodegroupRole

  InstanceProfile:
    Description: Instance profile of Rol
    Value: !Ref InstanceProfile
    Export:
      Name: !Sub ${EnvironmentName}-InstanceProfile

  AccessKey:
    Value: !Ref Keys
    Description: AWSAccessKeyId of new user
    
  SecretKey:
    Value: !GetAtt Keys.SecretAccessKey
    Description: AWSSecretAccessKey of new user